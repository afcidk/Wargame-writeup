from Crypto.Util.number import *
from sage.all import *
from sympy.ntheory.generate import prevprime, nextprime

n = 22001778874542774315484392481115711539281104740723517828461360611903057304469869336789715900703500619163822273767393143914615001907123143200486464636351989898613180095341102875678204218769723325121832871221496816486100959384589443689594053640486953989205859492780929786509801664036223045197702752965199575588498118481259145703054094713019549136875163271600746675338534685099132138833920166786918380439074398183268612427028138632848870032333985485970488955991639327
c = 1067382668222320523824132555613324239857438151855225316282176402453660987952614935478188752664288189856467574123997124118639803436040589761488611318906877644244524931837804614243835412551576647161461088877884786181205274671088951504353502973964810690277238868854693198170257109413583371510824777614377906808757366142801309478368968340750993831416162099183649651151826983793949933939474873893278527484810417812120138131555544749220438456366110721231219155629863865
e = 65537

head = 0
tail = Integer(Integer(n).n().nth_root(2))

# p and q1 and q2 are chained together, so we can simply bruteforce p to get q1 and q1
# Binary search is faster!
while True:
    mid = head + (tail - head) // 2
    p = nextprime(mid)
    q1 = nextprime(2 * p)
    q2 = nextprime(3 * q1)

    diff = (p * q1 * q2) - n
    if diff > 0:
        tail = mid
    elif diff < 0:
        head = mid
    else:
        break

phi = (p - 1) * (q1 - 1) * (q2 - 1)
tup = xgcd(e, phi)
d = Integer(mod(tup[1], phi))

print(long_to_bytes(pow(c, d, n)))
